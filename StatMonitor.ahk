#NoEnv
#Persistent
#SingleInstance, force

;#Include C:\Macros\Functions
#Include lib\Gdip_All.ahk
#Include lib\Gdip_ImageSearch.ahk

IniRead, Webhook, nm_config.ini, Status, Webhook

; CREATE TEMPLATE
; set image width and height
w := 3440, h := 2800

; prepare graphics
pToken := Gdip_Startup()
pBM := Gdip_CreateBitmap(w, h)
G := Gdip_GraphicsFromImage(pBM)
Gdip_SetSmoothingMode(G, 4)
Gdip_SetInterpolationMode(G, 7)

; draw background
pBrush := Gdip_BrushCreateSolid(0xff161616)
Gdip_FillRoundedRectangle(G, pBrush, -1, -1, w+1, h+1, 60)
Gdip_DeleteBrush(pBrush)

; regions format: element:[x,y,w,h]
regions := {"honey":[60,60,1280,920]
	, "honey/sec":[1400,60,1280,920]
	, "honey24h":[60,1040,2620,600]
	, "stats":[2740,60,640,1580]
	, "boost":[60,1720,785,480]
	, "on/off":[905,1720,785,480]
	, "focus":[1750,1720,785,480]
	, "haste":[2595,1720,785,480]
	, "buzzbomb":[60,2260,785,480]
	, "balloonaura":[905,2260,785,480]
	, "inspire":[1750,2260,785,480]
	, "marks":[2595,2260,785,480]}
	;, "colour1":[60,2800,785,480]
	;, "colour2":[905,2800,785,480]
	;, "colour3":[1750,2800,785,480]
	;, "colour4":[2595,2800,785,480]
	
; draw region backgrounds
for k,v in regions
{
	pPen := Gdip_CreatePen(0xff2d2b2d, 6), Gdip_DrawRoundedRectangle(G, pPen, v[1], v[2], v[3], v[4], 20), Gdip_DeletePen(pPen)
	pBrush := Gdip_BrushCreateSolid(0xff242224), Gdip_FillRoundedRectangle(G, pBrush, v[1], v[2], v[3], v[4], 20), Gdip_DeleteBrush(pBrush)
}
for k,v in {1:[40,80,560,330],2:[40,440,560,368],3:[40,838,560,284],4:[40,1152,560,398]}
{
	pPen := Gdip_CreatePen(0xff353335, 6), Gdip_DrawRoundedRectangle(G, pPen, regions["stats"][1]+v[1], regions["stats"][2]+v[2], v[3], v[4], 20), Gdip_DeletePen(pPen)
	pBrush := Gdip_BrushCreateSolid(0xff2c2a2c), Gdip_FillRoundedRectangle(G, pBrush, regions["stats"][1]+v[1], regions["stats"][2]+v[2], v[3], v[4], 20), Gdip_DeleteBrush(pBrush)
}

; draw text and other assets
Gdip_TextToGraphics(G, "HONEY", "s48 Center Bold cffffffff x" regions["honey"][1] " y" regions["honey"][2]+8, "Segoe UI", regions["honey"][3])
Gdip_TextToGraphics(G, "HONEY/SEC", "s48 Center Bold cffffffff x" regions["honey/sec"][1] " y" regions["honey/sec"][2]+8, "Segoe UI", regions["honey/sec"][3])
Gdip_TextToGraphics(G, "REPORT", "s48 Center Bold cffffffff x" regions["stats"][1] " y" regions["stats"][2]+8, "Segoe UI", regions["stats"][3])
Gdip_TextToGraphics(G, "LAST 24 HOURS", "s48 Center Bold cffffffff x" regions["honey24h"][1] " y" regions["honey24h"][2]+8, "Segoe UI", regions["honey24h"][3])
Gdip_TextToGraphics(G, "BOOST TOKENS", "s40 Center Bold cffffffff x" regions["boost"][1] " y" regions["boost"][2]+8, "Segoe UI", regions["boost"][3])
Gdip_TextToGraphics(G, "ON/OFF BUFFS", "s40 Center Bold cffffffff x" regions["on/off"][1] " y" regions["on/off"][2]+8, "Segoe UI", regions["on/off"][3])
Gdip_TextToGraphics(G, "FOCUS", "s40 Center Bold cffffffff x" regions["focus"][1] " y" regions["focus"][2]+8, "Segoe UI", regions["focus"][3])
Gdip_TextToGraphics(G, "HASTE", "s40 Center Bold cffffffff x" regions["haste"][1] " y" regions["haste"][2]+8, "Segoe UI", regions["haste"][3])
Gdip_TextToGraphics(G, "BUZZ BOMB", "s40 Center Bold cffffffff x" regions["buzzbomb"][1] " y" regions["buzzbomb"][2]+8, "Segoe UI", regions["buzzbomb"][3])
Gdip_TextToGraphics(G, "BALLOON AURA", "s40 Center Bold cffffffff x" regions["balloonaura"][1] " y" regions["balloonaura"][2]+8, "Segoe UI", regions["balloonaura"][3])
Gdip_TextToGraphics(G, "INSPIRE", "s40 Center Bold cffffffff x" regions["inspire"][1] " y" regions["inspire"][2]+8, "Segoe UI", regions["inspire"][3])
Gdip_TextToGraphics(G, "MARKS", "s40 Center Bold cffffffff x" regions["marks"][1] " y" regions["marks"][2]+8, "Segoe UI", regions["marks"][3])

onoff_images := []
onoff_images[1] := "iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAAAAAA7VNdtAAAAAmJLR0QA/4ePzL8AAAMKSURBVHgBzZbLTxNBGMD30SdtUVteKrVoKCUSG7kQEj1wMoJ6NMYY7xITL56MB49ET/4FxgvxZIx60IskGA2JQUyNGIw0gBVMLdDCwtLudnfc+Xa2M+20gIkHf4f9vvm6v3nt7IKIhEYgEQKH2FhphATXv+K/VVxw3Qst+yV18oIM+T4UY3NhenImo968CM29FL2Qmf0wM79eFgT3gLOGRopZUn4vzqbmfhZ0aAvhJIQ6Si6HVKWQyy5nVrKFEvOcu6IQeAU9eog0TS+b0GLpa4bAK+KJfAmSWqRk5U5nTQ6n2iBUIbn9Xl8CUkzFJXQmMhBt5FBbNNbZ3nLgxdMjUMDUKoGBN2TNUih2ejB5LOyTRAFNBg9AEVOriAPeIu6+NTl0pifihpq1K6vBJkgwtYqQiCxLkf7zQ/EA84YZGwEvJBhO6YgZo8O9QeZ+rGw10RtpRgh274y2QsZg6j5yJvEi4crg6l4rQMKCyjIdllOE2PYqRBbEfjp4pcPMQWQRZZMeN14Jy7wiyeXdlJCPn5jkV61XhsArTb487ZHgOqjQ08orHr/CKVLHxjYkGF5xe3Y4RYwq65BguEdp7Y5WpRga8riiWhYamDqKxL6S+fev00bXcMC1CE0MryCTng397YMpxYrjvcXvlafJK4bmdxaoP773CxJ1RpjXnLPs/Eopqs2kP/P5XdvA/MCjAVUKQtbCVTVClNQd5hysb0KwJ0YmqaQ+LZhS91mlRM6+OZ6GaCOSfkCB3Jy6/27D2iq5PV4kiv6N3ezDhyBYA5Dlo4kbdpfGykooDJkgOm8+xnOJfPqsAaz5W3zthzYQ+QglZI7R3ZavrEINYyvKVWYbjs5Bzeqn8rnzXF6CCmAr0y3wi00sDTWEjJd9MG/5+FgOCjb2WnI7EGx6IhCsBzCSmPhcFOS+c3H7NgKIa9foxIJPTKjZGOWywbYrE0NLI47jvr0FlcYQBaXJH8/mW+y06+IoKHPdK4qh4Wfb0NoN+j9M/tWaGB+kH/iGUGXfOKvenap+//Uo9bv7AxdRvNgYLpVXAAAAAElFTkSuQmCC"
onoff_images[2] := "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"
onoff_images[3] := "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"
onoff_images[4] := "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"
onoff_images[5] := "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"
for i,b64 in onoff_images
{
	pBMImage := Gdip_BitmapFromBase64(b64)
	Gdip_DrawImage(G, pBMImage, regions["on/off"][1]+40, regions["on/off"][2]+110+(regions["on/off"][4]-190)*(A_Index-1)//5)
	Gdip_DisposeImage(pBMImage)
}
VarSetCapacity(onoff_images, 0)

mark_images := []
mark_images[1] := "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"
mark_images[2] := "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"
mark_images[3] := "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"
for i,b64 in mark_images
{
	pBMImage := Gdip_BitmapFromBase64(b64)
	Gdip_DrawImage(G, pBMImage, regions["marks"][1]+40, regions["marks"][2]+131+(regions["marks"][4]-288)*(A_Index-1)//2)
	Gdip_DisposeImage(pBMImage)
}
VarSetCapacity(mark_images, 0)

; draw grids
pPen := Gdip_CreatePen(0x40c0c0f0, 2)
for k,v in regions
{
	switch k
	{
		case "honey","honey/sec":
		Loop, 7
		{
			x := v[1]+128+(v[3]-200)*(A_Index-1)//6
			y := v[2]+116+(v[3]-200)*(A_Index-1)//6
			Gdip_DrawLine(G, pPen, x, v[2]+84, x, v[2]+v[4]-52)
			(A_Index < 6) ? Gdip_DrawLine(G, pPen, v[1]+96, y, v[1]+v[3]-40, y)
		}
		
		case "honey24h":
		Loop, 25
		{
			x := v[1]+196+(v[3]-316)*(A_Index-1)//24
			y := v[2]+128+(v[3]-316)*(A_Index-1)//24
			Gdip_DrawLine(G, pPen, x, v[2]+v[4]-72, x, v[2]+v[4]-52)
			(A_Index < 6) ? Gdip_DrawLine(G, pPen, v[1]+160, y, v[1]+v[3]-84, y)
		}
		Gdip_TextToGraphics(G, "Today", "s24 Right Bold cffffffff x" v[1]+v[3]-84 " y" v[2]+v[4]-48, "Segoe UI")
		Gdip_TextToGraphics(G, "Yesterday", "s24 Left Bold cffffffff x" v[1]+160 " y" v[2]+v[4]-48, "Segoe UI")

		case "stats":
			
		case "marks":
		Loop, 7
		{
			x := v[1]+120+(v[3]-185)*(A_Index-1)//6
			y := v[2]+106+(v[4]-190)*(A_Index-1)//3
			Gdip_DrawLine(G, pPen, x, v[2]+v[4]-72, x, v[2]+v[4]-52)
			(A_Index < 5) ? Gdip_DrawLine(G, pPen, v[1]+97, y, v[1]+v[3]-40, y)
		}
		
		default:
		Loop, 7
		{
			x := v[1]+120+(v[3]-185)*(A_Index-1)//6
			y := v[2]+106+(v[4]-190)*(A_Index-1)//5
			Gdip_DrawLine(G, pPen, x, v[2]+v[4]-72, x, v[2]+v[4]-52)
			(A_Index < 7) ? Gdip_DrawLine(G, pPen, v[1]+97, y, v[1]+v[3]-40, y)
		}
	}
}
Gdip_DeletePen(pPen)

; leave pBM as final graph template
Gdip_DeleteGraphics(G)


; INITIALISE VARIABLES
; HONEY MONITORING
start_honey := DetectHoney()
; honey_values format: A_Min:value
honey_values := {}
; honey_gradients format: A_Min:gradient
honey_gradients := {}
; honey_24h format: (minutes DIV 5):value
honey_24h := {289:start_honey}

; BUFF MONITORING
; buff_colors format: possible_buffs:ARGB
buff_colors := {0xfff0f0f0:"haste/melody",0xff90ff8e:"boost",0xff22ff06:"focus",0xff272727:"buzzbomb",0xfffafd38:"balloonaura",0xffe2ac35:"clock",0xfff9ccff:"jbshare",0xff8de4f3:"babylove",0xfff4ef14:"inspire",0xff7e9eb3:"comforting",0xff937db3:"motivating",0xffb398a7:"satisfying",0xff78b375:"refreshing",0xffb35951:"invigorating",0xff3d713b:"mark",0xffdcdcdb:"bear",0xff656c73:"bear",0xffd3d0c6:"bear",0xffb38d4c:"bear",0xffa07d55:"bear",0xffbdaf6d:"bear",0xff4880cc:"bloat"} ;0xffe81a06:"flames",0xff91c2fd:"tide",0xfff99d27:"tabby",0xff86ebff:"polar"
; buff_values format: buff:{time_coefficient:value}
buff_values := {}
for k,v in ["haste","melody","redboost","blueboost","whiteboost","focus","buzzbomb","balloonaura","clock","jbshare","babylove","inspire","bear","guiding","pmark","hmark","fmark","comforting","motivating","satisfying","refreshing","invigorating","blessing","bloat","guiding","mondo"]
	buff_values[v] := {}
; buff_digits format: digit:pBM
buff_digits := {}
buff_digits[1] := Gdip_BitmapFromBase64("iVBORw0KGgoAAAANSUhEUgAAAAIAAAAMCAAAAABt1zOIAAAAAnRSTlMAAHaTzTgAAAACYktHRAD/h4/MvwAAABZJREFUeAFjYPjM+JmBgeEzEwMDLgQAWo0C7U3u8hAAAAAASUVORK5CYII=")
buff_digits[2] := Gdip_BitmapFromBase64("iVBORw0KGgoAAAANSUhEUgAAAAcAAAALCAAAAACW+8h0AAAAAnRSTlMAAHaTzTgAAAAhSURBVHgBY2T4zAAEvBAKSiJoKIBwoYJYKUYozQQmGRgA4X4JkG3weDkAAAAASUVORK5CYII=")
buff_digits[3] := Gdip_BitmapFromBase64("iVBORw0KGgoAAAANSUhEUgAAAAYAAAAKCAAAAACyZXDvAAAAAnRSTlMAAHaTzTgAAAAnSURBVHgBY/zMwMDAC8RA8JmBCUzDKJAQSBoE4DRCDiTICBLnZQAABkIHu+0HfkIAAAAASUVORK5CYII=")
buff_digits[4] := Gdip_BitmapFromBase64("iVBORw0KGgoAAAANSUhEUgAAAAgAAAAMCAAAAAB69aNBAAAAAnRSTlMAAHaTzTgAAAArSURBVHgBY4CAzwxMUBrCANJgAKRhTIgaGA9MA0Wg/M+MUAYMwAwEAjgDAPEYDGVo/CSrAAAAAElFTkSuQmCC")
buff_digits[5] := Gdip_BitmapFromBase64("iVBORw0KGgoAAAANSUhEUgAAAAcAAAALCAAAAACW+8h0AAAAAnRSTlMAAHaTzTgAAAAkSURBVHgBY/zMAAK8TGAKCCB8BhifEcznBREISQSACnzGUA8AKoMG1ueqWNEAAAAASUVORK5CYII=")
buff_digits[6] := Gdip_BitmapFromBase64("iVBORw0KGgoAAAANSUhEUgAAAAgAAAAKCAAAAACsrEBcAAAAAnRSTlMAAHaTzTgAAAAmSURBVHgBYwCBz2ASJ80EJoGAESLCC5SBSsGUACkw6zNQDYTFCwDMjAuD2culrgAAAABJRU5ErkJggg==")
buff_digits[7] := Gdip_BitmapFromBase64("iVBORw0KGgoAAAANSUhEUgAAAAgAAAANCAAAAACxqXDkAAAAAnRSTlMAAHaTzTgAAAAmSURBVHgBY/zMAAFMYBIBYOJwABRAVQNSAReBM0AArBcuAmfAAQBlkATNdzHTMwAAAABJRU5ErkJggg==")
buff_digits[8] := Gdip_BitmapFromBase64("iVBORw0KGgoAAAANSUhEUgAAAAgAAAAKCAAAAACsrEBcAAAAAnRSTlMAAHaTzTgAAAAvSURBVHgBY2Rg+MzAwMALxCAaSDCBKBBghIjwAkVA0mAAVQMDn1HYYIIRwuJlAADJAwqtSJojDgAAAABJRU5ErkJggg==")
buff_digits[9] := Gdip_BitmapFromBase64("iVBORw0KGgoAAAANSUhEUgAAAAgAAAAKCAAAAACsrEBcAAAAAnRSTlMAAHaTzTgAAAAqSURBVHgBY2Rg+MzAwMALxCAaRIBpBOvzZ0YoC6QIBD4zMIFpOADLotMAiJYMdrikL/4AAAAASUVORK5CYII=")
buff_digits[0] := Gdip_BitmapFromBase64("iVBORw0KGgoAAAANSUhEUgAAAAgAAAAKCAAAAACsrEBcAAAAAnRSTlMAAHaTzTgAAAArSURBVHgBY2Rg+MzAwMALxCAaQoDBZyYYmwlMYmXAAFApWPVnBkYIi5cBAJNvCLCTFAy9AAAAAElFTkSuQmCC")


; INFO FROM MAIN SCRIPT
; status_changes format: A_Min*60+A_Sec:status_number
; status_number: 0 = other, 1 = gathering, 2 = converting
status_changes := {A_Min*60+A_Sec:0}
; stats format: number:[string, value]
stats := {1:["Total Boss Kills",0],2:["Total Vic Kills",0],3:["Total Bug Kills",0],4:["Total Planters",0],5:["Quests Done",0],6:["Disconnects",0]}
; latest boost and winds information
latest_boost := "N/A"
latest_winds := "N/A"

OnMessage(0x004A, "Receive_WM_COPYDATA")

DllCall("GetSystemTimeAsFileTime", "int64p", start_time)
SetTimer, DetectBuffs, % -((60000000-Mod(start_time, 60000000))//10000 + 100)

DetectHoney()
{
	global honey_values
	
	; check roblox window exists
	rblxid := WinExist("Roblox")
	if !rblxid
		return 0
		
	VarSetCapacity(RECT, 16, 0)
	DllCall("user32\GetClientRect", Ptr,rblxid, Ptr,&RECT)
	DllCall("user32\ClientToScreen", Ptr,rblxid, Ptr,&RECT)
	_x := NumGet(&RECT, 0, "Int"), _y := NumGet(&RECT, 4, "Int")
	_w := NumGet(&RECT, 8, "Int"), _h := NumGet(&RECT, 12, "Int")
	
	; detect honey, enlarge image if necessary
	detectedValues := {}
	pBM := Gdip_BitmapFromScreen(_x+_w//2-250 "|" _y "|160|40")
	pEffect := Gdip_CreateEffect(5,-80,40)
	
	Loop, 50
	{
		pBMNew := Gdip_ResizeBitmap(pBM, 300 + A_Index * 5, 50 + A_Index, 0, 2)
		Gdip_BitmapApplyEffect(pBMNew, pEffect)
		hBM := Gdip_CreateHBITMAPFromBitmap(pBMNew)
		Gdip_DisposeImage(pBMNew)
		pIRandomAccessStream := HBitmapToRandomAccessStream(hBM)
		DllCall("DeleteObject", "Ptr", hBM)
		ocrtext := StrReplace(StrReplace("L" . StrReplace(StrReplace(ocr(pIRandomAccessStream), " ", "L"), "`n", "L"), "o", "0"), ".", ",")
		RegexMatch(ocrtext, "(?<=L)\d{1,3}(,\d{3})+(?=L)", detectedHoney)
		if detectedHoney
		{
			if (detectedValues.HasKey(detectedHoney))
				detectedValues[detectedHoney]++
			else
				detectedValues[detectedHoney]:=1
		}
	}
	
	for k,v in detectedValues
		if (v > detectedValues[mode])
			mode := k
	currentHoney := StrReplace(mode, ",")
	
	Gdip_DisposeImage(pBM), Gdip_DisposeEffect(pEffect)
		
	DllCall("psapi.dll\EmptyWorkingSet", "ptr", -1)
	
	index := (A_Min = "00") ? 61 : A_Min + 1
	
	if currentHoney
		honey_values[index] := currentHoney
	
	return currentHoney
}

DetectBuffs(list:="")
{
	global buff_colors, buff_values, buff_digits
	
	; check roblox window exists
	rblxid := WinExist("Roblox")
	if !rblxid
		return
	
	; get window client coordinates
	VarSetCapacity(RECT, 16, 0)
	DllCall("user32\GetClientRect", Ptr,rblxid, Ptr,&RECT)
	DllCall("user32\ClientToScreen", Ptr,rblxid, Ptr,&RECT)
	_x := NumGet(&RECT, 0, "Int"), _y := NumGet(&RECT, 4, "Int")
	_w := NumGet(&RECT, 8, "Int"), _h := NumGet(&RECT, 12, "Int")
	
	pBMHWND := Gdip_BitmapFromScreen(_x "|" _y "|" _w "|" _h)
	
	; NOTE: the following two sections are not strictly necessary
	; they are there to adjust for possible updates that change buff location
	; create pixel to search for science buff
	pBMPx := Gdip_CreateBitmap(1,1)
	pGraphics := Gdip_GraphicsFromImage(pBMPx)
	Gdip_GraphicsClear(pGraphics, 0xfff4a90d)
	Gdip_DeleteGraphics(pGraphics)
	
	; to find buff boundaries, search top left and bottom left of buff
	Gdip_ImageSearch(pBMHWND, pBMPx, tl_list, , , , 100)
	Gdip_ImageSearch(pBMHWND, pBMPx, br_list, , , , 100, , , 3)
	Gdip_DisposeImage(pBMPx)
	
	; set y offset and width (= height) of buff squares
	y := StrSplit(tl_list, "`,")[2]
	w := h := StrSplit(br_list, "`,")[2] - y + 1 ; only defined for w=h i.e. scales where 38*(scale) is an integer
	
	; create bitmap for buffs
	pBMArea := Gdip_CloneBitmapArea(pBMHWND, 0, y-6, _w, h+12)
	Gdip_DisposeImage(pBMHWND)
	
	; set time value
	DllCall("GetSystemTimeAsFileTime", "int64p", time)
	time_value := Mod(time, 36000000000)//60000000
	index := (time_value = 0) ? 601 : time_value + 1
	
	; display listed buffs
	if list
	{
		pBMBuffs := Gdip_CreateBitmap(StrSplit(list,",").Length()*h, h)
		G := Gdip_GraphicsFromImage(pBMBuffs)
		buff_count := 0
	}
	
	; assess buff squares
	Loop % _w//h
	{
		; get buff bitmap
		pBMBuff := Gdip_CloneBitmapArea(pBMArea, (w*(A_Index-1)-6 < 0) ? 0 : w*(A_Index-1)-6, 0, w+12, h+12)
		
		; identify buff
		for k,v in buff_colors
		{
			pBMPx := Gdip_CreateBitmap(1,1)
			pGraphics := Gdip_GraphicsFromImage(pBMPx)
			Gdip_GraphicsClear(pGraphics, k)
			Gdip_DeleteGraphics(pGraphics)
			
			buff := (Gdip_ImageSearch(pBMBuff, pBMPx, , 14, , w-4, , , , , (w-8)//2) = (w-8)//2) ? v : ""
			Gdip_DisposeImage(pBMPx)
			
			if buff
				break
			else if (k = buff_colors.Length())
			{
				pBMGuiding := Gdip_BitmapFromBase64("iVBORw0KGgoAAAANSUhEUgAAABIAAAABCAMAAADkUg5QAAAANlBMVEVCPSlGRTNeXUFkXj3Eu3nJv3rmy33nzH3oz3/p0YHs1obt2Yfu3ovw4Y7y5JDy5ZHy5pLy55LHa1N9AAAAG0lEQVR4AWNg4+Di4RNgYWJkYGYV5Ofl5mQHAAWZAJpQmBsPAAAAAElFTkSuQmCC")
				buff := Gdip_ImageSearch(pBMBuff, pBMGuiding, , 14, , w-4, , 21) ? "guiding" : buff
				Gdip_DisposeImage(pBMGuiding)
				
				pBMX := Gdip_BitmapFromBase64("iVBORw0KGgoAAAANSUhEUgAAAAcAAAAJCAAAAADbM2l/AAAAAnRSTlMAAHaTzTgAAAAgSURBVHgBY2D4zIAAYPZnmBCIYgKzwAAuDpGBciDUZwBhwwp0LiJb+gAAAABJRU5ErkJggg==")
				pBMBlessing := Gdip_BitmapFromBase64("iVBORw0KGgoAAAANSUhEUgAAACYAAAABAQMAAACIWk5jAAAAA1BMVEXIyjwmvLlhAAAAEUlEQVR4AQEGAPn/AAAAAAAAAAYAAazUVfoAAAAASUVORK5CYII=")
				buff := (Gdip_ImageSearch(pBMBuff, pBMX, , 12) && Gdip_ImageSearch(pBMBuff, pBMBlessing, , 6, 43, w+6, h+6, 30)) ? "blessing" : buff
				Gdip_DisposeImage(pBMBlessing)
				Gdip_DisposeImage(pBMX)
				
				pBMMondo := Gdip_BitmapFromBase64("iVBORw0KGgoAAAANSUhEUgAAAA4AAAABBAMAAAAcMII3AAAAGFBMVEWITCmmbjSnbjTplCDrnSnfrEnvsD3uu0usqxPtAAAAE0lEQVR4AQEIAPf/AAJXZDNGdRAGrAG86mjwkAAAAABJRU5ErkJggg==")
				buff := Gdip_ImageSearch(pBMBuff, pBMMondo, , 14, , w-4, , 21) ? "mondo" : buff
				Gdip_DisposeImage(pBMMondo)
			}
		}
		
		if (buff = "")
		{
			Gdip_DisposeImage(pBMBuff)
			continue
		}
		
		; split shared colours into separate buffs
		switch buff
		{
			case "haste/melody":
			pBMPx := Gdip_CreateBitmap(1,1)
			pGraphics := Gdip_GraphicsFromImage(pBMPx)
			Gdip_GraphicsClear(pGraphics, 0xff202020)
			Gdip_DeleteGraphics(pGraphics)
			buff := (Gdip_ImageSearch(pBMBuff, pBMPx, , 14, 6, w-4, 6+h//3, 12, , , 20) = 20) ? "melody" : "haste"
			Gdip_DisposeImage(pBMPx)
			
			case "boost":
			pBMPxRed := Gdip_CreateBitmap(1,1), pBMPxBlue := Gdip_CreateBitmap(1,1)
			pGRed := Gdip_GraphicsFromImage(pBMPxRed), pGBlue := Gdip_GraphicsFromImage(pBMPxBlue)
			Gdip_GraphicsClear(pGRed, 0xffe46156), Gdip_GraphicsClear(pGBlue, 0xff56a4e4)
			Gdip_DeleteGraphics(pGRed), Gdip_DeleteGraphics(pGBlue)
			buff := (Gdip_ImageSearch(pBMBuff, pBMPxRed, , 14, 6, w-4, h+6, 10, , , 2) = 2) ? "redboost"
				: (Gdip_ImageSearch(pBMBuff, pBMPxBlue, , 14, 6, w-4, h+6, 10, , , 2) = 2) ? "blueboost"
				: "whiteboost"
			Gdip_DisposeImage(pBMPxRed), Gdip_DisposeImage(pBMPxBlue)
			
			case "mark":
			pBMPxH := Gdip_CreateBitmap(1,1), pBMPxP := Gdip_CreateBitmap(1,1)
			pGH := Gdip_GraphicsFromImage(pBMPxH), pGP := Gdip_GraphicsFromImage(pBMPxP)
			Gdip_GraphicsClear(pGH, 0xffecc722), Gdip_GraphicsClear(pGP, 0xffecdc8a)
			Gdip_DeleteGraphics(pGH), Gdip_DeleteGraphics(pGP)
			buff := (Gdip_ImageSearch(pBMBuff, pBMPxH, , 14, 6, w-4, h+6, 10, , , 2) = 2) ? "hmark"
				: (Gdip_ImageSearch(pBMBuff, pBMPxP, , 14, 6, w-4, h+6, 10, , , 2) = 2) ? "pmark"
				: "fmark"
			Gdip_DisposeImage(pBMPxH), Gdip_DisposeImage(pBMPxP)
		}
		
		if buff in %list%
		{
			Gdip_DrawImage(G, pBMBuff, buff_count*w, 0, w, h, 6, 6, w, h)
			buff_count++
		}
		
		switch buff
		{
			; only on/off
			case "babylove","jbshare","melody","bear","guiding","fmark":
			buff_values[buff][index] := 1
			
			; 2 digit
			case "inspire","haste","redboost","blueboost","whiteboost","focus","buzzbomb","balloonaura","clock","pmark","hmark","blessing","mondo"o:
			pBMX := Gdip_BitmapFromBase64("iVBORw0KGgoAAAANSUhEUgAAAAcAAAAJCAAAAADbM2l/AAAAAnRSTlMAAHaTzTgAAAAgSURBVHgBY2D4zIAAYPZnmBCIYgKzwAAuDpGBciDUZwBhwwp0LiJb+gAAAABJRU5ErkJggg==")
			if Gdip_ImageSearch(pBMBuff, pBMX, , 12)
			{
				i = 1
				for k,v in buff_digits
				{
					if (k = 4)
						continue
					search := Gdip_ImageSearch(pBMBuff, v, digit%i%pos, 12, , , , , , , 2)
					switch search
					{
						case 2:
						if (k = 1)
						{
							search2 := Gdip_ImageSearch(pBMBuff, buff_digits[4], digit2pos, 12, , , , , , , 2)
							switch search2
							{
								case 2:
								buff_values[buff][index] := 44
								
								case 1:
								if (SubStr(digit1pos,1,InStr(digit1pos,",")-1) < SubStr(digit2pos,1,InStr(digit2pos,",")-1))
									buff_values[buff][index] := 14
								else
									buff_values[buff][index] := 41
								
								default:
								buff_values[buff][index] := 11
							}
						}
						else
							buff_values[buff][index] := k . k
						
						case 1:
						if (k = 1)
						{
							if Gdip_ImageSearch(pBMBuff, buff_digits[4], , 12)
								digit%i% := 4
							else
								digit%i% := 1
						}
						else
							digit%i% := k
						
						if (i = 1)
							i++
						else
						{
							if (SubStr(digit1pos,1,InStr(digit1pos,",")-1) < SubStr(digit2pos,1,InStr(digit2pos,",")-1))
								buff_values[buff][index] := digit1 . digit2
							else
								buff_values[buff][index] := digit2 . digit1
							break
						}
						
						default:
						if (A_Index = 10)
							buff_values[buff][index] := digit1 ? digit1 : buff_values[buff][index-1]
					}
				}
			}
			else
				buff_values[buff][index] := 1
			Gdip_DisposeImage(pBMX)
			
			; scaled
			case "bloat","comforting","motivating","satisfying","refreshing","invigorating":
			color := (buff = "bloat") ? 0xff4880cc
				: (buff = "comforting") ? 0xff7e9eb3
				: (buff = "motivating") ? 0xff937db3
				: (buff = "satisfying") ? 0xffb398a7
				: (buff = "refreshing") ? 0xff78b375
				: 0xffb35951 ; invigorating
			
			pBMPx := Gdip_CreateBitmap(1,1)
			pGraphics := Gdip_GraphicsFromImage(pBMPx)
			Gdip_GraphicsClear(pGraphics, color)
			Gdip_DeleteGraphics(pGraphics)
			
			Gdip_ImageSearch(pBMBuff, pBMPx, tl_list)
			Gdip_ImageSearch(pBMBuff, pBMPx, bl_list, , , , , , , 6)
			Gdip_ImageSearch(pBMBuff, pBMPx, br_list, , , , , , , 7)
			
			percent := Round((SubStr(bl_list,InStr(bl_list,",")+1) - SubStr(tl_list,InStr(tl_list,",")+1))*100/(SubStr(br_list,1,InStr(br_list,",")-1) - SubStr(bl_list,1,InStr(bl_list,",")-1)))
			buff_values[buff][index] := (buff = "bloat") ? Round(1 + percent/100*5, 2) : percent
		}
		
		Gdip_DisposeImage(pBMBuff)
	}
	
	for k,v in buff_values
		if !(v[index])
			v[index] := 0
	
	Gdip_DisposeImage(pBMArea), Gdip_DeleteGraphics(G)
	
	if !list
	{
		(Mod(index, 10) = 1) ? DetectHoney()
		(index = 601) ? SendHourlyReport()
		
		DllCall("GetSystemTimeAsFileTime", "int64p", time)
		SetTimer, DetectBuffs, % -((60000000-Mod(time, 60000000))//10000 + 100)
		Gdip_DisposeImage(pBMBuffs)
	}
	else
		return pBMBuffs
}

SendHourlyReport()
{
	global pBM, Webhook, regions, honey_values, honey_gradients, honey_24h, buff_values, buff_colors, status_changes, start_time, start_honey, stats, latest_boost, latest_winds
	static honey_average := 0, honey_earned := 0, convert_time := 0, gather_time := 0, other_time := 0, stats_old := {1:["Total Boss Kills",0],2:["Total Vic Kills",0],3:["Total Bug Kills",0],4:["Total Planters",0],5:["Quests Done",0],6:["Disconnects",0]}
	
	; update honey gradients and 24h data
	for k,v in honey_values
		if (honey_values[k+1] && honey_values[k])
			honey_gradients[k] := (honey_values[k+1]-honey_values[k])//60
	honey_gradients[61] := honey_gradients[60]
	honey_24h.RemoveAt(1, 12)
	Loop, 12
		honey_values[5*A_Index+1] ? honey_24h.Push(honey_values[5*A_Index+1]) : honey_24h.Push(honey_24h[276+A_Index])
	
	; set times array (10 min interval)	
	times := []
	time := A_Now
	Loop, 7
	{
		FormatTime, hhmm, %time%, HH:mm
		times.InsertAt(1, hhmm)
		EnvAdd, time, -10, m
	}
	
	; create graph bitmap and graphics
	pBMGraph := Gdip_CloneBitmapArea(pBM)
	G := Gdip_GraphicsFromImage(pBMGraph)
	Gdip_SetSmoothingMode(G, 4)
	Gdip_SetInterpolationMode(G, 7)

	; set variable graph bounds
	max_value := max(honey_values*), min_value := min(honey_values*), value_range := max_value - min_value
	max_gradient := max(honey_gradients*), min_gradient := 0, gradient_range := max_gradient
	max_24h := max(honey_24h*), min_24h := min(honey_24h*), 24h_range := max_24h - min_24h

	; draw graphs and stats
	for k,v in regions
	{
		points := []
		
		switch k
		{
			case "honey","honey/sec":
			source := (k = "honey") ? "value" : "gradient"
			Loop, 7
			{
				x := v[1]+128+(v[3]-200)*(A_Index-1)//6
				y := v[2]+80+(v[3]-200)*(A_Index-1)//6
				Gdip_TextToGraphics(G, times[A_Index], "s24 Center Bold cffffffff x" x " y" v[2]+v[4]-50, "Segoe UI")
				(A_Index < 6) ? Gdip_TextToGraphics(G, FormatNumber(max_%source%-(%source%_range*(A_Index-1))//4), "s26 Right Bold cffffffff x" v[1] " y" y, "Segoe UI", 126)
			}
			points.Push(v[1]+128+((v[3]-200)*(honey_%source%s.MinIndex()-1))//60, v[2]+v[4]-84)
			for x,y in honey_%source%s
				points.Push(v[1]+128+(v[3]-200)*(x-1)//60, v[2]+v[4]-84-((y-min_%source%)/%source%_range)*(((v[3]-200)*2)//3))
			points.Push(v[1]+v[3]-72, v[2]+v[4]-84)
			
			enum := ObjNewEnum(status_changes)
			enum.Next(m)
			for i,j in status_changes
			{
				if (enum.Next(m) = 0)
					m := 3600
				points := []
				points.Push(v[1]+128+((v[3]-200)*(i//60))//60, v[2]+v[4]-84)
				for x,y in honey_%source%s
					(x-1 >= i//60 && x-1 <= m//60) ? points.Push(v[1]+128+(v[3]-200)*(x-1)//60, v[2]+v[4]-84-((y-min_%source%)/%source%_range)*(((v[3]-200)*2)//3))
				points.Push(v[1]+128+((v[3]-200)*(m//60))//60, v[2]+v[4]-84)
				
				color := (j = 1) ? 0xffa6ff7c
						: (j = 2) ? 0xfffeca40
						: 0xff859aad
			
				pBrush := Gdip_BrushCreateSolid(color - 0x80000000)
				Gdip_FillPolygon(G, pBrush, points)
				Gdip_DeleteBrush(pBrush)
				
				points.RemoveAt(1, 2), points.Pop(), points.Pop()
				pPen := Gdip_CreatePen(color, 4)
				Gdip_DrawLines(G, pPen, points)
				Gdip_DeletePen(pPen)
				
				if (k = "honey")
				{
					enum_pts := ObjNewEnum(points)
					while (enum_pts[,x_1] && enum_pts.Next(,y_1))
						(Mod((x_1-v[1]-128)*60/(v[3]-200)+1, 5) = 1) ? Gdip_AddPathGradient(G, x_1-8, y_1-8, 16, 16, x_1, y_1, color, 0xffffffff, 0, 0.3, 0.3, 0)
				}
			}
			continue
			
			
			case "honey24h":
			Loop, 5
			{
				y := v[2]+110+(v[3]-316)*(A_Index-1)//24
				Gdip_TextToGraphics(G, FormatNumber(max_24h-(24h_range*(A_Index-1))//4), "s24 Right Bold cffffffff x" v[1] " y" y, "Segoe UI", 150)
			}
			points.Push(v[1]+196+((v[3]-316)*(honey_24h.MinIndex()-1))//288, v[2]+v[4]-88)
			for x,y in honey_24h
				points.Push(v[1]+196+(v[3]-316)*(x-1)//288, v[2]+v[4]-88-((y-min_24h)/24h_range)*(((v[3]-316))//6))
			points.Push(v[1]+196+((v[3]-316)*(honey_24h.MaxIndex()-1))//288, v[2]+v[4]-88)
			color := 0xff0e8bf0
			
			pBrush := Gdip_BrushCreateSolid(color - 0x80000000)
			Gdip_FillPolygon(G, pBrush, points)
			Gdip_DeleteBrush(pBrush)
			
			points.RemoveAt(1, 2), points.Pop(), points.Pop()
			pPen := Gdip_CreatePen(color, 4)
			Gdip_DrawLines(G, pPen, points)
			Gdip_DeletePen(pPen)
			continue
			
			
			case "stats":
			; update variables
			; calculate times
			DllCall("GetSystemTimeAsFileTime", "int64p", time)
			session_time := (time - start_time)//10000000
			status_list := ["Gather","Convert","Other"]
			for i,j in status_list
				hour_%j%_time := 0
			enum := ObjNewEnum(status_changes)
			enum.Next(m)
			for i,j in status_changes
			{
				if (enum.Next(m) = 0)
					m := 3600
				status := (j = 1) ? "Gather"
					: (j = 2) ? "Convert"
					: "Other"
				hour_%status%_time += m-i
			}
			for i,j in status_list
				%j%_time += hour_%j%_time
			
			; calculate percentages
			cumul_hour := 0, cumul_hour_rounded := 0
			cumul_total := 0, cumul_total_rounded := 0
			for i,j in status_list
			{
				cumul_hour += hour_%j%_time*100/3600
				hour_%j%_percent := Round(cumul_hour) - cumul_hour_rounded . "%"
				cumul_hour_rounded := Round(cumul_hour)
				
				cumul_total += %j%_time*100/session_time	
				%j%_percent := Round(cumul_total) - cumul_total_rounded . "%"
				cumul_total_rounded := Round(cumul_total)
			}
			
			; session
			current_honey := honey_values[honey_values.MaxIndex()]
			session_total := current_honey - start_honey
			
			; last hour
			hour_increase := (honey_values[honey_values.MaxIndex()] - honey_values[honey_values.MinIndex()] < honey_earned) ? "0" : "1"
			honey_earned := honey_values[honey_values.MaxIndex()] - honey_values[honey_values.MinIndex()]
			average_difference := honey_average ? ((session_total // (session_time / 3600)) - honey_average) : 0
			honey_change := (average_difference = 0) ? "(+0%)" : (average_difference > 0) ? "(+" . Ceil(average_difference * 100 / honey_average) . "%)" : "(-" . Floor(average_difference * 100 / honey_average) . "%)"
			honey_average := session_total // (session_time / 3600)
			
			
			; write stats
			; section 1: last hour
			pos := Gdip_TextToGraphics(G, "LAST HOUR", "s32 Center Bold cffffffff x" v[1]+v[3]//2 " y" v[2]+83, "Segoe UI")
			
			y := SubStr(pos, InStr(pos, "|", , , 1)+1, InStr(pos, "|", , , 2)-InStr(pos, "|", , , 1)-1)+SubStr(pos, InStr(pos, "|", , , 3)+1, InStr(pos, "|", , , 4)-InStr(pos, "|", , , 3)-1)+8
			Gdip_TextToGraphics(G, "Honey Earned", "s28 Right Bold ccfffffff x" v[1]+v[3]//2-20 " y" y, "Segoe UI")
			pos := Gdip_TextToGraphics(G, FormatNumber(honey_earned), "s28 Left Bold cffffffff x" v[1]+v[3]//2+20 " y" y, "Segoe UI")
			x := SubStr(pos, 1, InStr(pos, "|", , , 1)-1)+SubStr(pos, InStr(pos, "|", , , 2)+1, InStr(pos, "|", , , 3)-InStr(pos, "|", , , 2)-1)
			pBrush := Gdip_BrushCreateSolid(hour_increase ? 0xff00ff00 : 0xffff0000), Gdip_FillPolygon(G, pBrush, hour_increase ? (x+25 "," y+8 "|" x+10 "," y+32 "|" x+40 "," y+32) : (x+10 "," y+8 "|" x+40 "," y+8 "|" x+25 "," y+32)), Gdip_DeleteBrush(pBrush)
			
			y := SubStr(pos, InStr(pos, "|", , , 1)+1, InStr(pos, "|", , , 2)-InStr(pos, "|", , , 1)-1)+SubStr(pos, InStr(pos, "|", , , 3)+1, InStr(pos, "|", , , 4)-InStr(pos, "|", , , 3)-1)-4
			Gdip_TextToGraphics(G, "Hourly Average", "s28 Right Bold ccfffffff x" v[1]+v[3]//2-20 " y" y, "Segoe UI")
			pos := Gdip_TextToGraphics(G, FormatNumber(honey_average), "s28 Left Bold cffffffff x" v[1]+v[3]//2+20 " y" y, "Segoe UI")
			x := SubStr(pos, 1, InStr(pos, "|", , , 1)-1)+SubStr(pos, InStr(pos, "|", , , 2)+1, InStr(pos, "|", , , 3)-InStr(pos, "|", , , 2)-1)
			pos := Gdip_TextToGraphics(G, honey_change, "s28 Left Bold c" . (InStr(honey_change, "-") ? "ffff0000" : InStr(honey_change, "+0") ? "ff888888" : "ff00ff00") . " x" x " y" y, "Segoe UI")
			
			y := SubStr(pos, InStr(pos, "|", , , 1)+1, InStr(pos, "|", , , 2)-InStr(pos, "|", , , 1)-1)+SubStr(pos, InStr(pos, "|", , , 3)+1, InStr(pos, "|", , , 4)-InStr(pos, "|", , , 3)-1)-4
			angle := -90
			for i,j in status_list
			{
				color := (j = "Gather") ? 0xffa6ff7c
						: (j = "Convert") ? 0xfffeca40
						: 0xff859aad
				pBrush := Gdip_BrushCreateSolid(color)
				Gdip_FillPie(G, pBrush, v[1]+80, y+28, 144, 144, angle, hour_%j%_time/10)
				angle += hour_%j%_time/10
				
				Gdip_FillRoundedRectangle(G, pBrush, v[1]+v[3]//2+36, y+40+(A_Index-1)*48, 24, 24, 2)
				Gdip_DeleteBrush(pBrush)
				
				VarSetCapacity(hour_%j%_time_F,256),DllCall("GetDurationFormatEx","str","!x-sys-default-locale","uint",0,"ptr",0,"int64",hour_%j%_time*10000000,"wstr","hh:mm:ss","str",hour_%j%_time_F,"int",256)
				Gdip_TextToGraphics(G, j, "s24 Right Bold ccfffffff x" v[1]+v[3]//2+28 " y" y+35+(A_Index-1)*48, "Segoe UI")
				Gdip_TextToGraphics(G, hour_%j%_time_F, "s24 Left Bold cefffffff x" v[1]+v[3]//2+68 " y" y+35+(A_Index-1)*48, "Segoe UI")
				Gdip_TextToGraphics(G, hour_%j%_percent, "s24 Right Bold cefffffff x" v[1]+v[3]-80 " y" y+35+(A_Index-1)*48, "Segoe UI")
			}
			
			; section 2: session
			pos := Gdip_TextToGraphics(G, "SESSION", "s32 Center Bold cffffffff x" v[1]+v[3]//2 " y" v[2]+443, "Segoe UI")
			
			y := SubStr(pos, InStr(pos, "|", , , 1)+1, InStr(pos, "|", , , 2)-InStr(pos, "|", , , 1)-1)+SubStr(pos, InStr(pos, "|", , , 3)+1, InStr(pos, "|", , , 4)-InStr(pos, "|", , , 3)-1)+8
			Gdip_TextToGraphics(G, "Current Honey", "s28 Right Bold ccfffffff x" v[1]+v[3]//2-20 " y" y, "Segoe UI")
			pos := Gdip_TextToGraphics(G, FormatNumber(current_honey), "s28 Left Bold cffffffff x" v[1]+v[3]//2+20 " y" y, "Segoe UI")
			
			y := SubStr(pos, InStr(pos, "|", , , 1)+1, InStr(pos, "|", , , 2)-InStr(pos, "|", , , 1)-1)+SubStr(pos, InStr(pos, "|", , , 3)+1, InStr(pos, "|", , , 4)-InStr(pos, "|", , , 3)-1)-4
			Gdip_TextToGraphics(G, "Session Honey", "s28 Right Bold ccfffffff x" v[1]+v[3]//2-20 " y" y, "Segoe UI")
			pos := Gdip_TextToGraphics(G, FormatNumber(session_total), "s28 Left Bold cffffffff x" v[1]+v[3]//2+20 " y" y, "Segoe UI")
			
			y := SubStr(pos, InStr(pos, "|", , , 1)+1, InStr(pos, "|", , , 2)-InStr(pos, "|", , , 1)-1)+SubStr(pos, InStr(pos, "|", , , 3)+1, InStr(pos, "|", , , 4)-InStr(pos, "|", , , 3)-1)-4
			Gdip_TextToGraphics(G, "Session Time", "s28 Right Bold ccfffffff x" v[1]+v[3]//2-20 " y" y, "Segoe UI")
			VarSetCapacity(session_time_F,256),DllCall("GetDurationFormatEx","str","!x-sys-default-locale","uint",0,"ptr",0,"int64",session_time*10000000,"wstr","hh:mm:ss","str",session_time_F,"int",256)
			pos := Gdip_TextToGraphics(G, session_time_F, "s28 Left Bold cffffffff x" v[1]+v[3]//2+20 " y" y, "Segoe UI")
			
			y := SubStr(pos, InStr(pos, "|", , , 1)+1, InStr(pos, "|", , , 2)-InStr(pos, "|", , , 1)-1)+SubStr(pos, InStr(pos, "|", , , 3)+1, InStr(pos, "|", , , 4)-InStr(pos, "|", , , 3)-1)-4
			angle := -90
			for i,j in status_list
			{
				color := (j = "Gather") ? 0xffa6ff7c
						: (j = "Convert") ? 0xfffeca40
						: 0xff859aad
				pBrush := Gdip_BrushCreateSolid(color)
				Gdip_FillPie(G, pBrush, v[1]+80, y+28, 144, 144, angle, %j%_time/session_time*360)
				angle += %j%_time/session_time*360
				
				Gdip_FillRoundedRectangle(G, pBrush, v[1]+v[3]//2+36, y+40+(A_Index-1)*48, 24, 24, 2)
				Gdip_DeleteBrush(pBrush)
				
				VarSetCapacity(%j%_time_F,256),DllCall("GetDurationFormatEx","str","!x-sys-default-locale","uint",0,"ptr",0,"int64",%j%_time*10000000,"wstr","hh:mm:ss","str",%j%_time_F,"int",256)
				Gdip_TextToGraphics(G, j, "s24 Right Bold ccfffffff x" v[1]+v[3]//2+28 " y" y+35+(A_Index-1)*48, "Segoe UI")
				Gdip_TextToGraphics(G, %j%_time_F, "s24 Left Bold cefffffff x" v[1]+v[3]//2+68 " y" y+35+(A_Index-1)*48, "Segoe UI")
				Gdip_TextToGraphics(G, %j%_percent, "s24 Right Bold cefffffff x" v[1]+v[3]-80 " y" y+35+(A_Index-1)*48, "Segoe UI")
			}
			
			; section 3: stats
			pos := Gdip_TextToGraphics(G, "STATS", "s32 Center Bold cffffffff x" v[1]+v[3]//2 " y" v[2]+841, "Segoe UI")
			y := SubStr(pos, InStr(pos, "|", , , 1)+1, InStr(pos, "|", , , 2)-InStr(pos, "|", , , 1)-1)+SubStr(pos, InStr(pos, "|", , , 3)+1, InStr(pos, "|", , , 4)-InStr(pos, "|", , , 3)-1)+4
			
			for i,j in stats
			{
				Gdip_TextToGraphics(G, j[1], "s28 Right Bold ccfffffff x" v[1]+v[3]//2-20 " y" y, "Segoe UI")
				pos := Gdip_TextToGraphics(G, j[2], "s28 Left Bold cffffffff x" v[1]+v[3]//2+20 " y" y, "Segoe UI")
				if (j[2] > stats_old[i][2])
				{
					x := v[1]+v[3]//2+114
					pBrush := Gdip_BrushCreateSolid((j[1] = "Disconnects") ? 0xffff0000 : 0xff00ff00), Gdip_FillPolygon(G, pBrush, x+25 "," y+7 "|" x+10 "," y+31 "|" x+40 "," y+31), Gdip_DeleteBrush(pBrush)
					x := v[1]+v[3]//2+152
					Gdip_TextToGraphics(G, j[2]-stats_old[i][2], "s22 Left Bold cafffffff x" x+4 " y" y+4, "Segoe UI")
				}
				else
				{
					pBrush := Gdip_BrushCreateSolid(0xff666666)
					Gdip_FillRoundedRectangle(G, pBrush, v[1]+v[3]//2+126, y+16, 25, 6, 2)
					Gdip_DeleteBrush(pBrush)
				}
				y := SubStr(pos, InStr(pos, "|", , , 1)+1, InStr(pos, "|", , , 2)-InStr(pos, "|", , , 1)-1)+SubStr(pos, InStr(pos, "|", , , 3)+1, InStr(pos, "|", , , 4)-InStr(pos, "|", , , 3)-1)-4
			}
			
			; section 4: buffs
			pos := Gdip_TextToGraphics(G, "BUFFS", "s32 Center Bold cffffffff x" v[1]+v[3]//2 " y" v[2]+1155, "Segoe UI")
			
			y := SubStr(pos, InStr(pos, "|", , , 1)+1, InStr(pos, "|", , , 2)-InStr(pos, "|", , , 1)-1)+SubStr(pos, InStr(pos, "|", , , 3)+1, InStr(pos, "|", , , 4)-InStr(pos, "|", , , 3)-1)+4
			Gdip_TextToGraphics(G, "Latest Boosts", "s28 Right Bold ccfffffff x" v[1]+v[3]//2-20 " y" y, "Segoe UI")
			pos := Gdip_TextToGraphics(G, latest_boost, "s28 Left Bold cffffffff x" v[1]+v[3]//2+20 " y" y, "Segoe UI")
			
			y := SubStr(pos, InStr(pos, "|", , , 1)+1, InStr(pos, "|", , , 2)-InStr(pos, "|", , , 1)-1)+SubStr(pos, InStr(pos, "|", , , 3)+1, InStr(pos, "|", , , 4)-InStr(pos, "|", , , 3)-1)-4
			Gdip_TextToGraphics(G, "Latest Winds", "s28 Right Bold ccfffffff x" v[1]+v[3]//2-20 " y" y, "Segoe UI")
			pos := Gdip_TextToGraphics(G, latest_winds, "s28 Left Bold cffffffff x" v[1]+v[3]//2+20 " y" y, "Segoe UI")
			
			y := SubStr(pos, InStr(pos, "|", , , 1)+1, InStr(pos, "|", , , 2)-InStr(pos, "|", , , 1)-1)+SubStr(pos, InStr(pos, "|", , , 3)+1, InStr(pos, "|", , , 4)-InStr(pos, "|", , , 3)-1)+20
			pBMBuffsOrig := DetectBuffs("clock,mondo,blessing,bloat")
			Gdip_SaveBitmapToFile(pBMBuffsOrig, "file.png")
			pBMBuffs := Gdip_ResizeBitmap(pBMBuffsOrig, Gdip_GetImageWidth(pBMBuffsOrig)*2, Gdip_GetImageHeight(pBMBuffsOrig)*2, 0, 7)
			Loop, 4
				Gdip_DrawImage(G, pBMBuffs, v[1]+119+(A_Index-1)*110, y, 72, 72, 76*(A_Index-1)+2, 2, 72, 72)
			Gdip_DisposeImage(pBMBuffs)
			Gdip_DisposeImage(pBMBuffsOrig)
			
			y += 110
			for i,j in ["comforting","motivating","satisfying","refreshing","invigorating"]
			{
				color := (j = "comforting") ? 0xff7e9eb3
					: (j = "motivating") ? 0xff937db3
					: (j = "satisfying") ? 0xffb398a7
					: (j = "refreshing") ? 0xff78b375
					: 0xffb35951 ; invigorating
				angle := buff_values[j][buff_values[j].MaxIndex()]/100*360
				pPen := Gdip_CreatePen(color, 18), Gdip_DrawArc(G, pPen, v[1]+64+(A_Index-1)*108, y, 80, 80, -90, angle), Gdip_DeletePen(pPen)
				pPen := Gdip_CreatePen(color-0xc0000000, 18), Gdip_DrawArc(G, pPen, v[1]+64+(A_Index-1)*108, y, 80, 80, angle-90, 360-angle), Gdip_DeletePen(pPen)
				Gdip_TextToGraphics(G, buff_values[j][buff_values[j].MaxIndex()] "%", "s20 Center Bold cffffffff x" v[1]+104+(A_Index-1)*108 " y" y+26, "Segoe UI")
				pBrush := Gdip_BrushCreateSolid(color), Gdip_TextToGraphics(G, Format("{1:Us}", SubStr(j, 1, 3)), "s24 Center Bold c" pBrush " x" v[1]+104+(A_Index-1)*108 " y" y+92, "Segoe UI"), Gdip_DeleteBrush(pBrush)
			}
			continue
			
			
			default:
			Gdip_TextToGraphics(G, times[1], "s24 Left Bold cffffffff x" v[1]+97 " y" v[2]+v[4]-48, "Segoe UI")
			Gdip_TextToGraphics(G, times[7], "s24 Right Bold cffffffff x" v[1]+v[3]-40 " y" v[2]+v[4]-48, "Segoe UI")
			enum := ObjNewEnum(status_changes)
			enum.Next(m)
			pBrush := Gdip_BrushCreateSolid(0x60000000)
			for i,j in status_changes
			{
				if (enum.Next(m) = 0)
					m := 3600
				(j != 1) ? Gdip_FillRectangle(G, pBrush, v[1]+120+i//6, v[2]+106, (m-i)//6, v[4]-190)
			}
			Gdip_DeleteBrush(pBrush)
			switch k
			{
				case "boost":
				Loop, 6
				{
					y := v[2]+86+(v[4]-190)*(A_Index-1)//5
					Gdip_TextToGraphics(G, ((A_Index = 6) ? "" : "x") . FormatNumber(10-(10*(A_Index-1))//5), "s26 Right Bold cffffffff x" v[1] " y" y, "Segoe UI", 87)
				}
				Loop, 3
				{
					i := (A_Index = 1) ? "whiteboost"
						: (A_Index = 2) ? "redboost"
						: "blueboost"
					points := []
					n := A_Index*4-8
					points.Push(v[1]+120+(buff_values[i].MinIndex()-1), v[2]+v[4]-84+n)
					for x,y in buff_values[i]
						points.Push(v[1]+120+(x-1), v[2]+v[4]-84-(y/10)*(v[4]-190)+n)
					points.Push(v[1]+120+(buff_values[i].MaxIndex()-1), v[2]+v[4]-84+n)
					color := (i = "whiteboost") ? 0xffffffff
						: (i = "redboost") ? 0xffe46156
						: 0xff56a4e4
						
					points.RemoveAt(1, 2), points.Pop(), points.Pop()
					pPen := Gdip_CreatePen(color, 2)
					Gdip_DrawLines(G, pPen, points)
					Gdip_DeletePen(pPen)
				}
				continue
				
				
				case "on/off":
				Loop, 5
				{
					i := (A_Index = 1) ? "melody"
						: (A_Index = 2) ? "bear"
						: (A_Index = 3) ? "babylove"
						: (A_Index = 4) ? "jbshare"
						: "guidingstar"
					
					n := A_Index
					
					color := (i = "melody") ? 0xfff0f0f0
						: (i = "bear") ? 0xffb26f3e
						: (i = "babylove") ? 0xff8de4f3
						: (i = "jbshare") ? 0xfff9ccff
						: 0xffffef8e
					
					pBrush := Gdip_BrushCreateSolid(color)
					for x,y in buff_values[i]
						y ? Gdip_FillRectangle(G, pBrush, v[1]+120+(x-1), v[2]+110+(v[4]-190)*(n-1)//5, 1, 50)
					Gdip_DeleteBrush(pBrush)
				}
				continue
				
				
				case "marks":
				Loop, 3
				{
					i := (A_Index = 1) ? "pmark"
						: (A_Index = 2) ? "hmark"
						: "fmark"
					
					n := A_Index
					
					color := (i = "pmark") ? 0xffffe994
						: (i = "hmark") ? 0xffffd119
						: 0xffc84335
					
					pBrush := Gdip_BrushCreateSolid(color)
					for x,y in buff_values[i]
						y ? Gdip_FillRectangle(G, pBrush, v[1]+120+(x-1), v[2]+112+(v[4]-190)*(n-1)//3 + (n < 3 ? (3-(y > 3 ? 3 : y))*28 : 0), 1, (n < 3) ? ((y > 3 ? 3 : y)*28) : 84)
					Gdip_DeleteBrush(pBrush)
					
					if (n < 3)
					{
						pBrush := Gdip_BrushCreateSolid(0x20c0c0f0)
						Loop, 4
							Gdip_FillRectangle(G, pBrush, v[1]+103, v[2]+111+(v[4]-190)*(n-1)//3+(A_Index-1)*28, v[3]-149, 2)
						Gdip_DeleteBrush(pBrush)
					}
				}
				continue
				
				
				default:
				max := ceil(max(buff_values[k]*)/5)*5
				Loop, 6
				{
					y := v[2]+86+(v[4]-190)*(A_Index-1)//5
					Gdip_TextToGraphics(G, ((A_Index = 6) ? "" : "x") . FormatNumber(max-(max*(A_Index-1))//5), "s26 Right Bold cffffffff x" v[1] " y" y, "Segoe UI", 87)
				}
				
				points.Push(v[1]+120+(buff_values[k].MinIndex()-1), v[2]+v[4]-84)
				for x,y in buff_values[k]
					points.Push(v[1]+120+(x-1), v[2]+v[4]-84-(y/max)*(v[4]-190))
				points.Push(v[1]+120+(buff_values[k].MaxIndex()-1), v[2]+v[4]-84)
				
				color := (k = "focus") ? 0xff22ff06
					: (k = "haste") ? 0xfff0f0f0
					: (k = "buzzbomb") ? 0xffa0a0a0
					: (k = "balloonaura") ? 0xff3350c3
					: (k = "inspire") ? 0xfff4ef14 : 0
					
				points.RemoveAt(1, 2), points.Pop(), points.Pop()
				pPen := Gdip_CreatePen(color, 2)
				Gdip_DrawLines(G, pPen, points)
				Gdip_DeletePen(pPen)
				continue
			}
		}
	}
	
	Gdip_DeleteGraphics(G)

	Gdip_SaveBitmapToFile(pBMGraph, "file.png")
	Gdip_DisposeImage(pBMGraph)
	path := A_ScriptDir . "\file.png"

	payload_json =
	(
	{
		"embeds": [{
			"description": "[%A_Hour%:%A_Min%:%A_Sec%] **HOURLY REPORT**",
			"color": "14052794",
			"image": {"url": "attachment://file.png"}
		}]
	}
	)

	objParam := {payload_json: payload_json, file: [path]}
	CreateFormData(postdata, hdr_ContentType, objParam)

	try
	{
		wr := ComObjCreate("WinHTTP.WinHTTPRequest.5.1")
		wr.Open("POST", Webhook)
		wr.SetRequestHeader("User-Agent", "AHK")
		wr.SetRequestHeader("Content-Type", hdr_ContentType)
		wr.Send(postdata)
		wr.WaitForResponse()
	}

	FileDelete, file.png
	
	; save old stats for comparison
	stats_old := stats
	; reset honey values array
	honey_values := {1:current_honey}
	; reset honey gradients array
	honey_gradients := {}
	; reset status changes array
	current_status := status_changes[status_changes.MaxIndex()]
	status_changes := {0:current_status}
	; reset buff values array
	for k,v in buff_values
		v := {}
}

FormatNumber(n)
{
	static numnames := ["M","B","T","Qa","Qi"]
	digit := floor(log(abs(n)))+1
	if (digit > 6)
	{
		numname := (digit-4)//3
		numstring := SubStr((round(n,4-digit)) / 10**(3*numname+3), 1, 5)
		numformat := (SubStr(numstring, 0) = ".") ? 1.000 : numstring, numname += (SubStr(numstring, 0) = ".") ? 1 : 0
		num := SubStr((round(n,4-digit)) / 10**(3*numname+3), 1, 5) " " numnames[numname]
	}
	else
	{
		VarSetCapacity(num,32),DllCall("GetNumberFormatEx","str","!x-sys-default-locale","uint",0,"str",n,"ptr",0,"str",num,"int",32)
		num := SubStr(num, 1, -3)
	}
	return num
}

Receive_WM_COPYDATA(wParam, lParam)
{
	global stats, status_changes
	
    StringAddress := NumGet(lParam + 2*A_PtrSize)
    str := StrGet(StringAddress)
    
	; string received is "status %status_number%"
	; status_number: 0 = other, 1 = gathering, 2 = converting
	if (SubStr(str,1,6) = "status")
	{
		status_number := SubStr(str,8)
		if status_number is digit
			status_changes[A_Min*60+A_Sec] := status_number
		return 1
	}
	
	; string received is "incrementstat %stat_name%"
	if (SubStr(str,1,13) = "incrementstat")
	{
		stat_name := SubStr(str,15)
		for k,v in stats
			if (stat_name = v[1])
				v[2]++
		return 1
	}
	
	; invalid command
	return 0
}

min(X:="�", List*)
{
	for key, element in List
		if (element < X)
			X := element
	return X
}

max(X:="", List*)
{
	for key, element in List
		if (element > X)
			X := element
	return X
}

CreateFormData(ByRef retData, ByRef retHeader, objParam) {
	New CreateFormData(retData, retHeader, objParam)
}

Class CreateFormData {

	__New(ByRef retData, ByRef retHeader, objParam) {

		CRLF := "`r`n"

		Boundary := this.RandomBoundary()
		BoundaryLine := "------------------------------" . Boundary

		; Loop input paramters
		binArrs := []
		fileArrs := []
		For k, v in objParam
		{
			If IsObject(v) {
				For i, FileName in v
				{
					str := BoundaryLine . CRLF
					     . "Content-Disposition: form-data; name=""" . k . """; filename=""" . FileName . """" . CRLF
					     . "Content-Type: " . this.MimeType(FileName) . CRLF . CRLF
					fileArrs.Push( BinArr_FromString(str) )
					fileArrs.Push( BinArr_FromFile(FileName) )
					fileArrs.Push( BinArr_FromString(CRLF) )
				}
			} Else {
				str := BoundaryLine . CRLF
				     . "Content-Disposition: form-data; name=""" . k """" . CRLF . CRLF
				     . v . CRLF
				binArrs.Push( BinArr_FromString(str) )
			}
		}

		binArrs.push( fileArrs* )

		str := BoundaryLine . "--" . CRLF
		binArrs.Push( BinArr_FromString(str) )

		retData := BinArr_Join(binArrs*)
		retHeader := "multipart/form-data; boundary=----------------------------" . Boundary
	}

	RandomBoundary() {
		str := "0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z"
		Sort, str, D| Random
		str := StrReplace(str, "|")
		Return SubStr(str, 1, 12)
	}

	MimeType(FileName) {
		n := FileOpen(FileName, "r").ReadUInt()
		Return (n        = 0x474E5089) ? "image/png"
		     : (n        = 0x38464947) ? "image/gif"
		     : (n&0xFFFF = 0x4D42    ) ? "image/bmp"
		     : (n&0xFFFF = 0xD8FF    ) ? "image/jpeg"
		     : (n&0xFFFF = 0x4949    ) ? "image/tiff"
		     : (n&0xFFFF = 0x4D4D    ) ? "image/tiff"
		     : "application/octet-stream"
	}

}

BinArr_FromString(str) {
	oADO := ComObjCreate("ADODB.Stream")

	oADO.Type := 2 ; adTypeText
	oADO.Mode := 3 ; adModeReadWrite
	oADO.Open
	oADO.Charset := "UTF-8"
	oADO.WriteText(str)

	oADO.Position := 0
	oADO.Type := 1 ; adTypeBinary
	oADO.Position := 3 ; Skip UTF-8 BOM
	return oADO.Read, oADO.Close
}

BinArr_FromFile(FileName) {
	oADO := ComObjCreate("ADODB.Stream")

	oADO.Type := 1 ; adTypeBinary
	oADO.Open
	oADO.LoadFromFile(FileName)
	return oADO.Read, oADO.Close
}

BinArr_Join(Arrays*) {
	oADO := ComObjCreate("ADODB.Stream")

	oADO.Type := 1 ; adTypeBinary
	oADO.Mode := 3 ; adModeReadWrite
	oADO.Open
	For i, arr in Arrays
		oADO.Write(arr)
	oADO.Position := 0
	return oADO.Read, oADO.Close
}

BinArr_ToString(BinArr, Encoding := "UTF-8") {
	oADO := ComObjCreate("ADODB.Stream")

	oADO.Type := 1 ; adTypeBinary
	oADO.Mode := 3 ; adModeReadWrite
	oADO.Open
	oADO.Write(BinArr)

	oADO.Position := 0
	oADO.Type := 2 ; adTypeText
	oADO.Charset  := Encoding 
	return oADO.ReadText, oADO.Close
}

BinArr_ToFile(BinArr, FileName) {
	oADO := ComObjCreate("ADODB.Stream")

	oADO.Type := 1 ; adTypeBinary
	oADO.Open
	oADO.Write(BinArr)
	oADO.SaveToFile(FileName, 2)
	oADO.Close
}

HBitmapToRandomAccessStream(hBitmap) {
   static IID_IRandomAccessStream := "{905A0FE1-BC53-11DF-8C49-001E4FC686DA}"
        , IID_IPicture            := "{7BF80980-BF32-101A-8BBB-00AA00300CAB}"
        , PICTYPE_BITMAP := 1
        , BSOS_DEFAULT   := 0
        
   DllCall("Ole32\CreateStreamOnHGlobal", "Ptr", 0, "UInt", true, "PtrP", pIStream, "UInt")
   
   VarSetCapacity(PICTDESC, sz := 8 + A_PtrSize*2, 0)
   NumPut(sz, PICTDESC)
   NumPut(PICTYPE_BITMAP, PICTDESC, 4)
   NumPut(hBitmap, PICTDESC, 8)
   riid := CLSIDFromString(IID_IPicture, GUID1)
   DllCall("OleAut32\OleCreatePictureIndirect", "Ptr", &PICTDESC, "Ptr", riid, "UInt", false, "PtrP", pIPicture, "UInt")
   ; IPicture::SaveAsFile
   DllCall(NumGet(NumGet(pIPicture+0) + A_PtrSize*15), "Ptr", pIPicture, "Ptr", pIStream, "UInt", true, "UIntP", size, "UInt")
   riid := CLSIDFromString(IID_IRandomAccessStream, GUID2)
   DllCall("ShCore\CreateRandomAccessStreamOverStream", "Ptr", pIStream, "UInt", BSOS_DEFAULT, "Ptr", riid, "PtrP", pIRandomAccessStream, "UInt")
   ObjRelease(pIPicture)
   ObjRelease(pIStream)
   Return pIRandomAccessStream
}

CLSIDFromString(IID, ByRef CLSID) {
   VarSetCapacity(CLSID, 16, 0)
   if res := DllCall("ole32\CLSIDFromString", "WStr", IID, "Ptr", &CLSID, "UInt")
      throw Exception("CLSIDFromString failed. Error: " . Format("{:#x}", res))
   Return &CLSID
}


ocr(file, lang := "FirstFromAvailableLanguages")
{
   static OcrEngineStatics, OcrEngine, MaxDimension, LanguageFactory, Language, CurrentLanguage, BitmapDecoderStatics, GlobalizationPreferencesStatics
   if (OcrEngineStatics = "")
   {
      CreateClass("Windows.Globalization.Language", ILanguageFactory := "{9B0252AC-0C27-44F8-B792-9793FB66C63E}", LanguageFactory)
      CreateClass("Windows.Graphics.Imaging.BitmapDecoder", IBitmapDecoderStatics := "{438CCB26-BCEF-4E95-BAD6-23A822E58D01}", BitmapDecoderStatics)
      CreateClass("Windows.Media.Ocr.OcrEngine", IOcrEngineStatics := "{5BFFA85A-3384-3540-9940-699120D428A8}", OcrEngineStatics)
      DllCall(NumGet(NumGet(OcrEngineStatics+0)+6*A_PtrSize), "ptr", OcrEngineStatics, "uint*", MaxDimension)   ; MaxImageDimension
   }
   if (file = "ShowAvailableLanguages")
   {
      if (GlobalizationPreferencesStatics = "")
         CreateClass("Windows.System.UserProfile.GlobalizationPreferences", IGlobalizationPreferencesStatics := "{01BF4326-ED37-4E96-B0E9-C1340D1EA158}", GlobalizationPreferencesStatics)
      DllCall(NumGet(NumGet(GlobalizationPreferencesStatics+0)+9*A_PtrSize), "ptr", GlobalizationPreferencesStatics, "ptr*", LanguageList)   ; get_Languages
      DllCall(NumGet(NumGet(LanguageList+0)+7*A_PtrSize), "ptr", LanguageList, "int*", count)   ; count
      loop % count
      {
         DllCall(NumGet(NumGet(LanguageList+0)+6*A_PtrSize), "ptr", LanguageList, "int", A_Index-1, "ptr*", hString)   ; get_Item
         DllCall(NumGet(NumGet(LanguageFactory+0)+6*A_PtrSize), "ptr", LanguageFactory, "ptr", hString, "ptr*", LanguageTest)   ; CreateLanguage
         DllCall(NumGet(NumGet(OcrEngineStatics+0)+8*A_PtrSize), "ptr", OcrEngineStatics, "ptr", LanguageTest, "int*", bool)   ; IsLanguageSupported
         if (bool = 1)
         {
            DllCall(NumGet(NumGet(LanguageTest+0)+6*A_PtrSize), "ptr", LanguageTest, "ptr*", hText)
            buffer := DllCall("Combase.dll\WindowsGetStringRawBuffer", "ptr", hText, "uint*", length, "ptr")
            text .= StrGet(buffer, "UTF-16") "`n"
         }
         ObjRelease(LanguageTest)
      }
      ObjRelease(LanguageList)
      return text
   }
   if (lang != CurrentLanguage) or (lang = "FirstFromAvailableLanguages")
   {
      if (OcrEngine != "")
      {
         ObjRelease(OcrEngine)
         if (CurrentLanguage != "FirstFromAvailableLanguages")
            ObjRelease(Language)
      }
      if (lang = "FirstFromAvailableLanguages")
         DllCall(NumGet(NumGet(OcrEngineStatics+0)+10*A_PtrSize), "ptr", OcrEngineStatics, "ptr*", OcrEngine)   ; TryCreateFromUserProfileLanguages
      else
      {
         CreateHString(lang, hString)
         DllCall(NumGet(NumGet(LanguageFactory+0)+6*A_PtrSize), "ptr", LanguageFactory, "ptr", hString, "ptr*", Language)   ; CreateLanguage
         DeleteHString(hString)
         DllCall(NumGet(NumGet(OcrEngineStatics+0)+9*A_PtrSize), "ptr", OcrEngineStatics, ptr, Language, "ptr*", OcrEngine)   ; TryCreateFromLanguage
      }
      if (OcrEngine = 0)
      {
         msgbox Can not use language "%lang%" for OCR, please install language pack.
         ExitApp
      }
      CurrentLanguage := lang
   }
   IRandomAccessStream := file
   DllCall(NumGet(NumGet(BitmapDecoderStatics+0)+14*A_PtrSize), "ptr", BitmapDecoderStatics, "ptr", IRandomAccessStream, "ptr*", BitmapDecoder)   ; CreateAsync
   WaitForAsync(BitmapDecoder)
   BitmapFrame := ComObjQuery(BitmapDecoder, IBitmapFrame := "{72A49A1C-8081-438D-91BC-94ECFC8185C6}")
   DllCall(NumGet(NumGet(BitmapFrame+0)+12*A_PtrSize), "ptr", BitmapFrame, "uint*", width)   ; get_PixelWidth
   DllCall(NumGet(NumGet(BitmapFrame+0)+13*A_PtrSize), "ptr", BitmapFrame, "uint*", height)   ; get_PixelHeight
   if (width > MaxDimension) or (height > MaxDimension)
   {
      msgbox Image is to big - %width%x%height%.`nIt should be maximum - %MaxDimension% pixels
      ExitApp
   }
   BitmapFrameWithSoftwareBitmap := ComObjQuery(BitmapDecoder, IBitmapFrameWithSoftwareBitmap := "{FE287C9A-420C-4963-87AD-691436E08383}")
   DllCall(NumGet(NumGet(BitmapFrameWithSoftwareBitmap+0)+6*A_PtrSize), "ptr", BitmapFrameWithSoftwareBitmap, "ptr*", SoftwareBitmap)   ; GetSoftwareBitmapAsync
   WaitForAsync(SoftwareBitmap)
   DllCall(NumGet(NumGet(OcrEngine+0)+6*A_PtrSize), "ptr", OcrEngine, ptr, SoftwareBitmap, "ptr*", OcrResult)   ; RecognizeAsync
   WaitForAsync(OcrResult)
   DllCall(NumGet(NumGet(OcrResult+0)+6*A_PtrSize), "ptr", OcrResult, "ptr*", LinesList)   ; get_Lines
   DllCall(NumGet(NumGet(LinesList+0)+7*A_PtrSize), "ptr", LinesList, "int*", count)   ; count
   loop % count
   {
      DllCall(NumGet(NumGet(LinesList+0)+6*A_PtrSize), "ptr", LinesList, "int", A_Index-1, "ptr*", OcrLine)
      DllCall(NumGet(NumGet(OcrLine+0)+7*A_PtrSize), "ptr", OcrLine, "ptr*", hText) 
      buffer := DllCall("Combase.dll\WindowsGetStringRawBuffer", "ptr", hText, "uint*", length, "ptr")
      text .= StrGet(buffer, "UTF-16") "`n"
      ObjRelease(OcrLine)
   }
   Close := ComObjQuery(IRandomAccessStream, IClosable := "{30D5A829-7FA4-4026-83BB-D75BAE4EA99E}")
   DllCall(NumGet(NumGet(Close+0)+6*A_PtrSize), "ptr", Close)   ; Close
   ObjRelease(Close)
   Close := ComObjQuery(SoftwareBitmap, IClosable := "{30D5A829-7FA4-4026-83BB-D75BAE4EA99E}")
   DllCall(NumGet(NumGet(Close+0)+6*A_PtrSize), "ptr", Close)   ; Close
   ObjRelease(Close)
   ObjRelease(IRandomAccessStream)
   ObjRelease(BitmapDecoder)
   ObjRelease(BitmapFrame)
   ObjRelease(BitmapFrameWithSoftwareBitmap)
   ObjRelease(SoftwareBitmap)
   ObjRelease(OcrResult)
   ObjRelease(LinesList)
   return text
}



CreateClass(string, interface, ByRef Class)
{
   CreateHString(string, hString)
   VarSetCapacity(GUID, 16)
   DllCall("ole32\CLSIDFromString", "wstr", interface, "ptr", &GUID)
   result := DllCall("Combase.dll\RoGetActivationFactory", "ptr", hString, "ptr", &GUID, "ptr*", Class)
   if (result != 0)
   {
      if (result = 0x80004002)
         msgbox No such interface supported
      else if (result = 0x80040154)
         msgbox Class not registered
      else
         msgbox error: %result%
      ExitApp
   }
   DeleteHString(hString)
}

CreateHString(string, ByRef hString)
{
    DllCall("Combase.dll\WindowsCreateString", "wstr", string, "uint", StrLen(string), "ptr*", hString)
}

DeleteHString(hString)
{
   DllCall("Combase.dll\WindowsDeleteString", "ptr", hString)
}

WaitForAsync(ByRef Object)
{
   AsyncInfo := ComObjQuery(Object, IAsyncInfo := "{00000036-0000-0000-C000-000000000046}")
   loop
   {
      DllCall(NumGet(NumGet(AsyncInfo+0)+7*A_PtrSize), "ptr", AsyncInfo, "uint*", status)   ; IAsyncInfo.Status
      if (status != 0)
      {
         if (status != 1)
         {
            DllCall(NumGet(NumGet(AsyncInfo+0)+8*A_PtrSize), "ptr", AsyncInfo, "uint*", ErrorCode)   ; IAsyncInfo.ErrorCode
            msgbox AsyncInfo status error: %ErrorCode%
            ExitApp
         }
         ObjRelease(AsyncInfo)
         break
      }
      sleep 10
   }
   DllCall(NumGet(NumGet(Object+0)+8*A_PtrSize), "ptr", Object, "ptr*", ObjectResult)   ; GetResults
   ObjRelease(Object)
   Object := ObjectResult
}